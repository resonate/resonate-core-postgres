/***********************************************************************************************************************
* UTILITY Schema Trigger Functions
*
* These functions aid in the creation of dynamic triggers.
***********************************************************************************************************************/

/***********************************************************************************************************************
* TRIGGER_FUNCTION_HEADER_GET Function
*
* Gets a trigger function header.
***********************************************************************************************************************/
create or replace function _utility.trigger_function_header_get(strCreator text, strSchema text, strTable text, 
                                                               eType _utility.trigger_type, 
                                                               eWhen _utility.trigger_when) returns text as $$
begin
    return 'create or replace function ' || strSchema || '.' || _utility.string_table_shorten(strTable) || '_' ||
           lower(strCreator) || '_trigger_' || eType || '_' || eWhen || E'() returns trigger as \$\$' || E'\r\n' ||
           '-- AUTOMATICALLY GENERATED BY THE ' || upper(strCreator) || ' SCHEMA - DO NOT UPDATE OR DELETE!';
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_function_header_get(text, text, text, _utility.trigger_type, _utility.trigger_when) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;
/***********************************************************************************************************************
* TRIGGER_FUNCTION_FOOTER_GET Function
*
* Gets a trigger function footer.
***********************************************************************************************************************/
create or replace function _utility.trigger_function_footer_get(eType _utility.trigger_type, 
                                                               eWhen _utility.trigger_when,
                                                               eSecurity _utility.trigger_security) returns text as $$
declare
    strSQL text = '';
begin
    if eType = 'insert' or eType = 'update' then
        strSQL = strSQL || 
                 E'\r\n\r\n    return new;';
    else
        strSQL = strSQL || 
                 E'\r\n\r\n    return old;';
    end if;

    strSQL = strSQL ||
             E'\r\n' || 'end' || E'\r\n' || E'\$\$ language plpgsql security ' || eSecurity;

    return strSQL;
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_function_footer_get(_utility.trigger_type, _utility.trigger_when, _utility.trigger_security) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;
/***********************************************************************************************************************
* TRIGGER_FUNCTION_GET Function
*
* Gets a trigger function string by putting together all the supplied pieces.
***********************************************************************************************************************/
create or replace function _utility.trigger_function_get(strCreator text, strSchema text, strTable text, 
                                                        eType _utility.trigger_type, eWhen _utility.trigger_when, 
                                                        eSecurity _utility.trigger_security,
                                                        strDeclare text, strBody text) returns text as $$
declare
    strTrigger text;                                                        
begin
    strTrigger = _utility.trigger_function_header_get(strCreator, strSchema, strTable, eType, eWhen);

    if strDeclare is not null then
        strTrigger = strTrigger || E'\r\n' || 
            'declare' || E'\r\n' ||
            strDeclare;
    end if;

    strTrigger = strTrigger || E'\r\n' ||
        'begin';

    if strBody is not null then
        strTrigger = strTrigger || E'\r\n' || 
            strBody;
    end if;

    strTrigger = strTrigger || 
                 _utility.trigger_function_footer_get(eType, eWhen, eSecurity);

    return strTrigger;
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_function_get(text, text, text, _utility.trigger_type, _utility.trigger_when, _utility.trigger_security, text, text) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;
/***********************************************************************************************************************
* TRIGGER_FUNCTION_CREATE Function
*
* Creates a trigger function.
***********************************************************************************************************************/
create or replace function _utility.trigger_function_create(strCreator text, strSchema text, strTable text,
                                                           eType _utility.trigger_type, eWhen _utility.trigger_when,
                                                           eSecurity _utility.trigger_security,
                                                           strDeclare text, strBody text) returns void as $$
begin
    execute _utility.trigger_function_get(strCreator, strSchema, strTable, eType, eWhen, eSecurity, strDeclare, strBody);
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_function_create(text, text, text, _utility.trigger_type, _utility.trigger_when, _utility.trigger_security, text, text) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;
/***********************************************************************************************************************
* TRIGGER_FUNCTION_DROP Function
*
* Drops a trigger.
***********************************************************************************************************************/
create or replace function _utility.trigger_function_drop(strCreator text, strSchema text, strTable text, 
                                                          eType _utility.trigger_type, 
                                                          eWhen _utility.trigger_when) returns void as $$
begin
    execute 'drop function ' || strSchema || '.' || _utility.string_table_shorten(strTable) || '_' || strCreator || '_trigger_' || eType || '_' || eWhen || '()';
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_function_drop(text, text, text, _utility.trigger_type, _utility.trigger_when) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;
/***********************************************************************************************************************
* TRIGGER_GET Function
*
* Gets a trigger.
***********************************************************************************************************************/
create or replace function _utility.trigger_get(strCreator text, strSchema text, strTable text, 
                                               eType _utility.trigger_type, 
                                               eWhen _utility.trigger_when) returns text as $$
declare
    strTrigger text;
begin
	strTrigger =  'create trigger ' || _utility.string_table_shorten(strTable) || '_' || lower(strCreator) || 
	              '_trigger_' || eType || '_' || eWhen || E'\r\n' ||
			      '    ' || eWhen || ' ' || eType || ' on ' || 
			      _utility.string_schema_table_combine(strSchema, strTable) || E'\r\n' ||
			      '    for each row ' || E'\r\n';

    if eType = 'update' then			  
        strTrigger = strTrigger || 
                 '    when (old.* is distinct from new.*)' || E'\r\n';
    end if;

    strTrigger = strTrigger ||
			 '    execute procedure ' || strSchema || '.' || _utility.string_table_shorten(strTable) || '_' ||
			 lower(strCreator) || '_trigger_' || eType || '_' || eWhen || '()';

    return strTrigger;			 
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_get(text, text, text, _utility.trigger_type, _utility.trigger_when) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;
/***********************************************************************************************************************
* TRIGGER_CREATE Function
*
* Creates a trigger.
***********************************************************************************************************************/
create or replace function _utility.trigger_create(strCreator text, strSchema text, strTable text, 
                                                   eType _utility.trigger_type, 
                                                   eWhen _utility.trigger_when) returns void as $$
begin
    execute _utility.trigger_get(strCreator, strSchema, strTable, eType, eWhen);
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_create(text, text, text, _utility.trigger_type, _utility.trigger_when) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;
/***********************************************************************************************************************
* TRIGGER_DROP Function
*
* Drops a trigger.
***********************************************************************************************************************/
create or replace function _utility.trigger_drop(strCreator text, strSchema text, strTable text, 
                                                 eType _utility.trigger_type, 
                                                 eWhen _utility.trigger_when) returns void as $$
begin
    execute 'drop trigger ' || _utility.string_table_shorten(strTable) || '_' || strCreator || '_trigger_' || eType || '_' || eWhen || ' on ' || strSchema || '.' || strTable;
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_drop(text, text, text, _utility.trigger_type, _utility.trigger_when) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;
/***********************************************************************************************************************
* TRIGGER_CREATE Function
*
* Creates a trigger function and a trigger.
***********************************************************************************************************************/
create or replace function _utility.trigger_create(strCreator text, strSchema text, strTable text,
                                                   eType _utility.trigger_type, eWhen _utility.trigger_when, 
                                                   eSecurity _utility.trigger_security,
                                                   strDeclare text, strBody text) returns void as $$
begin
    execute _utility.trigger_function_create(strCreator, strSchema, strTable, eType, eWhen, eSecurity, strDeclare, strBody);			 
    execute _utility.trigger_create(strCreator, strSchema, strTable, eType, eWhen);			 
end;
$$ language plpgsql;

do $$
begin
    execute 'grant execute on function _utility.trigger_create(text, text, text, _utility.trigger_type, _utility.trigger_when, _utility.trigger_security, text, text) to ' || 
            _utility.role_get('user') || ', ' || _utility.role_get('etl');
end $$;